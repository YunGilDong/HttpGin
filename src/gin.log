[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN] 2020/07/03 - 19:12:01 | 200 |       997.3µs |             ::1 | GET      "/api1/login"
[GIN] 2020/07/03 - 19:12:01 | 200 |     18.9479ms |             ::1 | GET      "/api1/login"
[GIN] 2020/07/03 - 19:12:02 | 200 |            0s |             ::1 | GET      "/api1/login"
[GIN] 2020/07/03 - 19:12:02 | 200 |         996µs |             ::1 | GET      "/api1/login"
[GIN] 2020/07/03 - 19:12:02 | 200 |       997.8µs |             ::1 | GET      "/api1/login"
[GIN] 2020/07/03 - 19:12:02 | 200 |      1.9942ms |             ::1 | GET      "/api1/login"
[GIN] 2020/07/03 - 19:12:02 | 200 |            0s |             ::1 | GET      "/api1/login"
[GIN] 2020/07/03 - 19:12:02 | 200 |      1.0001ms |             ::1 | GET      "/api1/login"
[GIN] 2020/07/03 - 19:12:02 | 200 |      1.9933ms |             ::1 | GET      "/api1/login"
[GIN] 2020/07/03 - 19:12:02 | 200 |      2.9911ms |             ::1 | GET      "/api1/login"
[GIN] 2020/07/03 - 19:12:02 | 200 |            0s |             ::1 | GET      "/api1/login"
[GIN] 2020/07/03 - 19:12:02 | 200 |       996.5µs |             ::1 | GET      "/api1/login"
[GIN] 2020/07/03 - 19:12:03 | 200 |            0s |             ::1 | GET      "/api1/login"
[GIN] 2020/07/03 - 19:12:03 | 200 |       998.2µs |             ::1 | GET      "/api1/login"
[GIN] 2020/07/03 - 19:12:03 | 200 |       1.002ms |             ::1 | GET      "/api1/login"
[GIN] 2020/07/03 - 19:12:03 | 200 |      4.9874ms |             ::1 | GET      "/api1/login"
[GIN] 2020/07/03 - 19:12:04 | 200 |       997.5µs |             ::1 | GET      "/api1/login"
[GIN] 2020/07/03 - 19:12:04 | 200 |      1.9954ms |             ::1 | GET      "/api1/login"
[GIN] 2020/07/03 - 19:12:04 | 200 |       997.8µs |             ::1 | GET      "/api1/login"
[GIN] 2020/07/03 - 19:12:04 | 200 |       997.8µs |             ::1 | GET      "/api1/login"
[GIN] 2020/07/03 - 19:12:04 | 200 |            0s |             ::1 | GET      "/api1/login"
[GIN] 2020/07/03 - 19:12:04 | 200 |            0s |             ::1 | GET      "/api1/login"
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN] 2020/07/06 - 17:51:10 | 404 |            0s |             ::1 | GET      "/login"
[GIN] 2020/07/06 - 17:51:10 | 404 |            0s |             ::1 | GET      "/favicon.ico"
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN] 2020/07/06 - 17:53:51 | 404 |            0s |             ::1 | GET      "/login"
[GIN] 2020/07/06 - 17:54:25 | 404 |            0s |             ::1 | GET      "/login"
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN] 2020/07/06 - 17:55:04 | 404 |            0s |             ::1 | GET      "/login"
[GIN] 2020/07/06 - 17:55:11 | 404 |            0s |             ::1 | GET      "/login"
[GIN] 2020/07/06 - 17:55:13 | 404 |            0s |             ::1 | GET      "/login"
[GIN] 2020/07/06 - 17:55:15 | 404 |            0s |             ::1 | GET      "/login"
[GIN] 2020/07/06 - 17:55:20 | 404 |            0s |             ::1 | GET      "/login"
[GIN] 2020/07/06 - 17:55:40 | 200 |     12.9864ms |             ::1 | GET      "/api1/login"
[GIN] 2020/07/06 - 17:55:40 | 200 |      13.964ms |             ::1 | GET      "/api1/login"
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN] 2020/07/06 - 17:56:06 | 200 |      9.9782ms |             ::1 | GET      "/api1/login"
[GIN] 2020/07/06 - 17:56:06 | 200 |      9.9782ms |             ::1 | GET      "/api1/login"
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN] 2020/07/06 - 18:10:38 | 200 |     11.9486ms |             ::1 | GET      "/api1/login"
[GIN] 2020/07/06 - 18:10:38 | 200 |     12.9461ms |             ::1 | GET      "/api1/login"
[GIN] 2020/07/06 - 18:10:41 | 200 |     11.0484ms |             ::1 | GET      "/api1/login"
[GIN] 2020/07/06 - 18:10:41 | 200 |     11.0484ms |             ::1 | GET      "/api1/login"
[GIN] 2020/07/06 - 18:10:41 | 200 |      9.9756ms |             ::1 | GET      "/api1/login"
[GIN] 2020/07/06 - 18:10:41 | 200 |      9.9756ms |             ::1 | GET      "/api1/login"
[GIN] 2020/07/06 - 18:10:42 | 200 |      9.9745ms |             ::1 | GET      "/api1/login"
[GIN] 2020/07/06 - 18:10:42 | 200 |      9.9745ms |             ::1 | GET      "/api1/login"
[GIN] 2020/07/06 - 18:10:43 | 200 |     10.0006ms |             ::1 | GET      "/api1/login"
[GIN] 2020/07/06 - 18:10:43 | 200 |     10.9706ms |             ::1 | GET      "/api1/login"
[GIN] 2020/07/06 - 18:10:43 | 200 |     11.9725ms |             ::1 | GET      "/api1/login"
[GIN] 2020/07/06 - 18:10:43 | 200 |     11.9725ms |             ::1 | GET      "/api1/login"
[GIN] 2020/07/06 - 18:10:44 | 200 |      9.9735ms |             ::1 | GET      "/api1/login"
[GIN] 2020/07/06 - 18:10:44 | 200 |     11.0099ms |             ::1 | GET      "/api1/login"
[GIN] 2020/07/06 - 18:10:44 | 200 |     10.9856ms |             ::1 | GET      "/api1/login"
[GIN] 2020/07/06 - 18:10:44 | 200 |     10.9856ms |             ::1 | GET      "/api1/login"
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN] 2020/07/07 - 13:50:06 | 200 |      11.968ms |             ::1 | GET      "/api1/login"
[GIN] 2020/07/07 - 13:50:06 | 200 |      11.968ms |             ::1 | GET      "/api1/login"
[GIN] 2020/07/07 - 13:50:06 | 404 |            0s |             ::1 | GET      "/favicon.ico"
[GIN] 2020/07/07 - 13:50:09 | 200 |      13.968ms |             ::1 | GET      "/api1/login"
[GIN] 2020/07/07 - 13:50:09 | 200 |      13.968ms |             ::1 | GET      "/api1/login"
[GIN] 2020/07/07 - 13:50:09 | 200 |     17.3662ms |             ::1 | GET      "/api1/login"
[GIN] 2020/07/07 - 13:50:09 | 200 |     18.3653ms |             ::1 | GET      "/api1/login"
[GIN] 2020/07/07 - 13:50:09 | 200 |      8.9752ms |             ::1 | GET      "/api1/login"
[GIN] 2020/07/07 - 13:50:09 | 200 |      9.9729ms |             ::1 | GET      "/api1/login"
[GIN] 2020/07/07 - 13:50:09 | 200 |     20.9429ms |             ::1 | GET      "/api1/login"
[GIN] 2020/07/07 - 13:50:09 | 200 |     21.9422ms |             ::1 | GET      "/api1/login"
[GIN] 2020/07/07 - 13:50:10 | 200 |      9.9735ms |             ::1 | GET      "/api1/login"
[GIN] 2020/07/07 - 13:50:10 | 200 |     10.9711ms |             ::1 | GET      "/api1/login"
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] GET    /api1/group               --> router.Group (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN] 2020/07/07 - 13:52:31 | 200 |     10.9394ms |             ::1 | GET      "/api1/login"
[GIN] 2020/07/07 - 13:52:31 | 200 |      11.968ms |             ::1 | GET      "/api1/login"
[GIN] 2020/07/07 - 13:52:32 | 200 |      10.943ms |             ::1 | GET      "/api1/login"
[GIN] 2020/07/07 - 13:52:32 | 200 |     11.9409ms |             ::1 | GET      "/api1/login"
[GIN] 2020/07/07 - 13:52:35 | 200 |      11.969ms |             ::1 | GET      "/api1/group"
[GIN] 2020/07/07 - 13:52:35 | 200 |      11.969ms |             ::1 | GET      "/api1/group"
[GIN] 2020/07/07 - 13:52:36 | 200 |     10.9619ms |             ::1 | GET      "/api1/group"
[GIN] 2020/07/07 - 13:52:36 | 200 |     10.9619ms |             ::1 | GET      "/api1/group"
[GIN] 2020/07/07 - 13:52:37 | 200 |     16.9775ms |             ::1 | GET      "/api1/group"
[GIN] 2020/07/07 - 13:52:37 | 200 |     23.9588ms |             ::1 | GET      "/api1/group"
[GIN] 2020/07/07 - 13:52:37 | 200 |     10.9737ms |             ::1 | GET      "/api1/group"
[GIN] 2020/07/07 - 13:52:37 | 200 |     10.9737ms |             ::1 | GET      "/api1/group"
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] GET    /api1/group               --> router.Group (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] GET    /api1/group               --> router.Group (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] GET    /api1/group               --> router.Group (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] GET    /api1/group               --> router.Group (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] GET    /api1/group               --> router.Group (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] GET    /api1/group               --> router.Group (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] GET    /api1/group               --> router.Group (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] GET    /api1/group               --> router.Group (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] GET    /api1/group               --> router.Group (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] GET    /api1/group               --> router.Group (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] GET    /api1/group               --> router.Group (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] GET    /api1/group               --> router.Group (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] GET    /api1/group               --> router.Group (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] GET    /api1/group               --> router.Group (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] GET    /api1/group               --> router.Group (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] GET    /api1/group               --> router.Group (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] GET    /api1/group               --> router.Group (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] GET    /api1/group               --> router.Group (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] GET    /api1/group               --> router.Group (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] GET    /api1/group               --> router.Group (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN] 2020/07/08 - 09:34:56 | 200 |     20.9412ms |             ::1 | GET      "/api1/login"
[GIN] 2020/07/08 - 09:34:56 | 200 |     20.9412ms |             ::1 | GET      "/api1/login"
[GIN] 2020/07/08 - 09:34:56 | 404 |            0s |             ::1 | GET      "/favicon.ico"
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] GET    /api1/group               --> router.Group (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] GET    /api1/group               --> router.Group (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] GET    /api1/group               --> router.Group (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] GET    /api1/group               --> router.Group (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] GET    /api1/group               --> router.Group (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] GET    /api1/group               --> router.Group (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] GET    /api1/group               --> router.Group (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] GET    /api1/group               --> router.Group (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] GET    /api1/group               --> router.Group (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] GET    /api1/group               --> router.Group (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] GET    /api1/group               --> router.Group (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] GET    /api1/group               --> router.Group (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] GET    /api1/group               --> router.Group (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] GET    /api1/group               --> router.Group (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] GET    /api1/group               --> router.Group (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] GET    /api1/group               --> router.Group (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] GET    /api1/group               --> router.Group (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] GET    /api1/group               --> router.Group (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] GET    /api1/group               --> router.Group (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] GET    /api1/group               --> router.Group (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] GET    /api1/group               --> router.Group (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] GET    /api1/group               --> router.Group (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] GET    /api1/group               --> router.Group (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] GET    /api1/group               --> router.Group (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] GET    /api1/group               --> router.Group (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] GET    /api1/group               --> router.Group (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] GET    /api1/group               --> router.Group (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] GET    /api1/group               --> router.Group (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] GET    /api1/group               --> router.Group (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] GET    /api1/group               --> router.Group (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] GET    /api1/group               --> router.Group (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] GET    /api1/group               --> router.Group (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] GET    /api1/group               --> router.Group (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] GET    /api1/group               --> router.Group (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] GET    /api1/group               --> router.Group (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] GET    /api1/group               --> router.Group (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] GET    /api1/group               --> router.Group (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] GET    /api1/group               --> router.Group (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] GET    /api1/group               --> router.Group (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] GET    /api1/group               --> router.Group (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] GET    /api1/group               --> router.Group (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] GET    /api1/group               --> router.Group (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] GET    /api1/group               --> router.Group (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] GET    /api1/group               --> router.Group (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] GET    /api1/group               --> router.Group (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] GET    /api1/group               --> router.Group (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] GET    /api1/group               --> router.Group (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] GET    /api1/group               --> router.Group (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] GET    /api1/group               --> router.Group (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] GET    /api1/group               --> router.Group (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] GET    /api1/group               --> router.Group (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] GET    /api1/group               --> router.Group (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] GET    /api1/group               --> router.Group (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] GET    /api1/group               --> router.Group (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] GET    /api1/group               --> router.Group (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] GET    /api1/group               --> router.Group (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] GET    /api1/group               --> router.Group (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] GET    /api1/group               --> router.Group (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] GET    /api1/group               --> router.Group (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] GET    /api1/group               --> router.Group (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] GET    /api1/group               --> router.Group (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] GET    /api1/group               --> router.Group (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] GET    /api1/group               --> router.Group (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] GET    /api1/group               --> router.Group (5 handlers)
[GIN-debug] GET    /api1/lc_state_summary    --> router.Lc_state_summary (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN] 2020/07/09 - 17:07:31 | 200 |       997.5µs |             ::1 | GET      "/api1/lc_state_summary"
[GIN] 2020/07/09 - 17:07:31 | 200 |      6.9803ms |             ::1 | GET      "/api1/lc_state_summary"
[GIN] 2020/07/09 - 17:07:31 | 404 |            0s |             ::1 | GET      "/favicon.ico"
[GIN-debug] redirecting request 301: /api1/lc_state_summary --> /api1/lc_state_summary
[GIN] 2020/07/09 - 17:08:02 | 200 |      4.9854ms |             ::1 | GET      "/api1/lc_state_summary"
[GIN] 2020/07/09 - 17:08:02 | 200 |      5.9837ms |             ::1 | GET      "/api1/lc_state_summary"
[GIN] 2020/07/09 - 17:08:12 | 200 |       997.3µs |             ::1 | GET      "/api1/lc_state_summary"
[GIN] 2020/07/09 - 17:08:12 | 200 |       997.3µs |             ::1 | GET      "/api1/lc_state_summary"
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] GET    /api1/group               --> router.Group (5 handlers)
[GIN-debug] GET    /api1/lc_state_summary    --> router.Lc_state_summary (5 handlers)
[GIN-debug] GET    /api1/lc_event            --> router.Lc_event (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] GET    /api1/group               --> router.Group (5 handlers)
[GIN-debug] GET    /api1/lc_state_summary    --> router.Lc_state_summary (5 handlers)
[GIN-debug] GET    /api1/lc_event            --> router.Lc_event (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] GET    /api1/group               --> router.Group (5 handlers)
[GIN-debug] GET    /api1/lc_state_summary    --> router.Lc_state_summary (5 handlers)
[GIN-debug] GET    /api1/lc_event            --> router.Lc_event (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] GET    /api1/group               --> router.Group (5 handlers)
[GIN-debug] GET    /api1/lc_state_summary    --> router.Lc_state_summary (5 handlers)
[GIN-debug] GET    /api1/lc_event            --> router.Lc_event (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN] 2020/07/10 - 11:18:26 | 200 |     10.9708ms |             ::1 | GET      "/api1/login"
[GIN] 2020/07/10 - 11:18:26 | 200 |     10.9708ms |             ::1 | GET      "/api1/login"
[GIN] 2020/07/10 - 11:18:26 | 404 |            0s |             ::1 | GET      "/favicon.ico"
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] GET    /api1/group               --> router.Group (5 handlers)
[GIN-debug] GET    /api1/lc_state_summary    --> router.Lc_state_summary (5 handlers)
[GIN-debug] GET    /api1/lc_event            --> router.Lc_event (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] GET    /api1/group               --> router.Group (5 handlers)
[GIN-debug] GET    /api1/lc_state_summary    --> router.Lc_state_summary (5 handlers)
[GIN-debug] GET    /api1/lc_event            --> router.Lc_event (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN] 2020/07/10 - 14:00:06 | 200 |   13.0220849s |             ::1 | GET      "/api1/lc_event"
[GIN] 2020/07/10 - 14:00:06 | 200 |   13.0230857s |             ::1 | GET      "/api1/lc_event"
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] GET    /api1/group               --> router.Group (5 handlers)
[GIN-debug] GET    /api1/lc_state_summary    --> router.Lc_state_summary (5 handlers)
[GIN-debug] GET    /api1/lc_event            --> router.Lc_event (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN] 2020/07/10 - 14:03:00 | 200 |      7.9781ms |             ::1 | GET      "/api1/login"
[GIN] 2020/07/10 - 14:03:00 | 200 |      7.9781ms |             ::1 | GET      "/api1/login"
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] GET    /api1/group               --> router.Group (5 handlers)
[GIN-debug] GET    /api1/lc_state_summary    --> router.Lc_state_summary (5 handlers)
[GIN-debug] GET    /api1/lc_event            --> router.Lc_event (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] GET    /api1/group               --> router.Group (5 handlers)
[GIN-debug] GET    /api1/lc_state_summary    --> router.Lc_state_summary (5 handlers)
[GIN-debug] GET    /api1/lc_event            --> router.Lc_event (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] GET    /api1/group               --> router.Group (5 handlers)
[GIN-debug] GET    /api1/lc_state_summary    --> router.Lc_state_summary (5 handlers)
[GIN-debug] GET    /api1/lc_event            --> router.Lc_event (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] GET    /api1/group               --> router.Group (5 handlers)
[GIN-debug] GET    /api1/lc_state_summary    --> router.Lc_state_summary (5 handlers)
[GIN-debug] GET    /api1/lc_event            --> router.Lc_event (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] GET    /api1/group               --> router.Group (5 handlers)
[GIN-debug] GET    /api1/lc_state_summary    --> router.Lc_state_summary (5 handlers)
[GIN-debug] GET    /api1/lc_event            --> router.Lc_event (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] GET    /api1/group               --> router.Group (5 handlers)
[GIN-debug] GET    /api1/lc_state_summary    --> router.Lc_state_summary (5 handlers)
[GIN-debug] GET    /api1/lc_event            --> router.Lc_event (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] GET    /api1/group               --> router.Group (5 handlers)
[GIN-debug] GET    /api1/lc_state_summary    --> router.Lc_state_summary (5 handlers)
[GIN-debug] GET    /api1/lc_event            --> router.Lc_event (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] GET    /api1/group               --> router.Group (5 handlers)
[GIN-debug] GET    /api1/lc_state_summary    --> router.Lc_state_summary (5 handlers)
[GIN-debug] GET    /api1/lc_event            --> router.Lc_event (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] GET    /api1/group               --> router.Group (5 handlers)
[GIN-debug] GET    /api1/lc_state_summary    --> router.Lc_state_summary (5 handlers)
[GIN-debug] GET    /api1/lc_event            --> router.Lc_event (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] GET    /api1/group               --> router.Group (5 handlers)
[GIN-debug] GET    /api1/lc_state_summary    --> router.Lc_state_summary (5 handlers)
[GIN-debug] GET    /api1/lc_event            --> router.Lc_event (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] GET    /api1/group               --> router.Group (5 handlers)
[GIN-debug] GET    /api1/lc_state_summary    --> router.Lc_state_summary (5 handlers)
[GIN-debug] GET    /api1/lc_event            --> router.Lc_event (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] GET    /api1/group               --> router.Group (5 handlers)
[GIN-debug] GET    /api1/lc_state_summary    --> router.Lc_state_summary (5 handlers)
[GIN-debug] GET    /api1/lc_event            --> router.Lc_event (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] GET    /api1/group               --> router.Group (5 handlers)
[GIN-debug] GET    /api1/lc_state_summary    --> router.Lc_state_summary (5 handlers)
[GIN-debug] GET    /api1/lc_event            --> router.Lc_event (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] GET    /api1/group               --> router.Group (5 handlers)
[GIN-debug] GET    /api1/lc_state_summary    --> router.Lc_state_summary (5 handlers)
[GIN-debug] GET    /api1/lc_event            --> router.Lc_event (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] GET    /api1/group               --> router.Group (5 handlers)
[GIN-debug] GET    /api1/lc_state_summary    --> router.Lc_state_summary (5 handlers)
[GIN-debug] GET    /api1/lc_event            --> router.Lc_event (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] GET    /api1/group               --> router.Group (5 handlers)
[GIN-debug] GET    /api1/lc_state_summary    --> router.Lc_state_summary (5 handlers)
[GIN-debug] GET    /api1/lc_event            --> router.Lc_event (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] GET    /api1/group               --> router.Group (5 handlers)
[GIN-debug] GET    /api1/lc_state_summary    --> router.Lc_state_summary (5 handlers)
[GIN-debug] GET    /api1/lc_event            --> router.Lc_event (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] GET    /api1/group               --> router.Group (5 handlers)
[GIN-debug] GET    /api1/lc_state_summary    --> router.Lc_state_summary (5 handlers)
[GIN-debug] GET    /api1/lc_event            --> router.Lc_event (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] GET    /api1/group               --> router.Group (5 handlers)
[GIN-debug] GET    /api1/lc_state_summary    --> router.Lc_state_summary (5 handlers)
[GIN-debug] GET    /api1/lc_event            --> router.Lc_event (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] GET    /api1/group               --> router.Group (5 handlers)
[GIN-debug] GET    /api1/lc_state_summary    --> router.Lc_state_summary (5 handlers)
[GIN-debug] GET    /api1/lc_event            --> router.Lc_event (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] GET    /api1/group               --> router.Group (5 handlers)
[GIN-debug] GET    /api1/lc_state_summary    --> router.Lc_state_summary (5 handlers)
[GIN-debug] GET    /api1/lc_event            --> router.Lc_event (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] GET    /api1/group               --> router.Group (5 handlers)
[GIN-debug] GET    /api1/lc_state_summary    --> router.Lc_state_summary (5 handlers)
[GIN-debug] GET    /api1/lc_event            --> router.Lc_event (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] GET    /api1/group               --> router.Group (5 handlers)
[GIN-debug] GET    /api1/lc_state_summary    --> router.Lc_state_summary (5 handlers)
[GIN-debug] GET    /api1/lc_event            --> router.Lc_event (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN] 2020/07/10 - 15:13:08 | 200 |   21.0223095s |             ::1 | GET      "/api1/lc_event"
[GIN] 2020/07/10 - 15:13:08 | 200 |   21.0233096s |             ::1 | GET      "/api1/lc_event"
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] GET    /api1/group               --> router.Group (5 handlers)
[GIN-debug] GET    /api1/lc_state_summary    --> router.Lc_state_summary (5 handlers)
[GIN-debug] GET    /api1/lc_event            --> router.Lc_event (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN] 2020/07/10 - 15:14:29 | 404 |            0s |    192.168.1.10 | GET      "/"
[GIN] 2020/07/10 - 15:14:29 | 404 |            0s |    192.168.1.10 | GET      "/favicon.ico"
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] GET    /api1/group               --> router.Group (5 handlers)
[GIN-debug] GET    /api1/lc_state_summary    --> router.Lc_state_summary (5 handlers)
[GIN-debug] GET    /api1/lc_event            --> router.Lc_event (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] GET    /api1/group               --> router.Group (5 handlers)
[GIN-debug] GET    /api1/lc_state_summary    --> router.Lc_state_summary (5 handlers)
[GIN-debug] GET    /api1/lc_event            --> router.Lc_event (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] GET    /api1/group               --> router.Group (5 handlers)
[GIN-debug] GET    /api1/lc_state_summary    --> router.Lc_state_summary (5 handlers)
[GIN-debug] GET    /api1/lc_event            --> router.Lc_event (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (5 handlers)
[GIN-debug] GET    /api1/group               --> router.Group (5 handlers)
[GIN-debug] GET    /api1/lc_state_summary    --> router.Lc_state_summary (5 handlers)
[GIN-debug] GET    /api1/lc_event            --> router.Lc_event (5 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (6 handlers)
[GIN-debug] GET    /api1/group               --> router.Group (6 handlers)
[GIN-debug] GET    /api1/lc_state_summary    --> router.Lc_state_summary (6 handlers)
[GIN-debug] GET    /api1/lc_event            --> router.Lc_event (6 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN] 2020/07/15 - 13:12:37 | 200 |     50.8631ms |             ::1 | GET      "/"
[GIN] 2020/07/15 - 13:12:37 | 200 |       997.3µs |             ::1 | GET      "/style.css"
[GIN] 2020/07/15 - 13:12:37 | 200 |      8.4912ms |             ::1 | GET      "/bundle.js"
[GIN] 2020/07/15 - 13:12:37 | 200 |      2.9924ms |             ::1 | GET      "/data/seoul_node.geojson"
[GIN] 2020/07/15 - 13:12:37 | 404 |            0s |             ::1 | GET      "/favicon.ico"
[GIN] 2020/07/15 - 13:12:38 | 200 |    229.9127ms |             ::1 | GET      "/data/seoul_link.geojson"
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (6 handlers)
[GIN-debug] GET    /api1/group               --> router.Group (6 handlers)
[GIN-debug] GET    /api1/lc_state_summary    --> router.Lc_state_summary (6 handlers)
[GIN-debug] GET    /api1/lc_event            --> router.Lc_event (6 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (6 handlers)
[GIN-debug] GET    /api1/group               --> router.Group (6 handlers)
[GIN-debug] GET    /api1/lc_state_summary    --> router.Lc_state_summary (6 handlers)
[GIN-debug] GET    /api1/lc_event            --> router.Lc_event (6 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN] 2020/07/17 - 13:45:05 | 200 |      4.9977ms |             ::1 | GET      "/api1/login"
[GIN] 2020/07/17 - 13:45:05 | 200 |      5.9971ms |             ::1 | GET      "/api1/login"
[GIN] 2020/07/17 - 13:45:05 | 404 |            0s |             ::1 | GET      "/favicon.ico"
[GIN] 2020/07/17 - 13:45:54 | 200 |         1m13s |             ::1 | GET      "/api1/lc_event"
[GIN] 2020/07/17 - 13:45:54 | 200 |         1m13s |             ::1 | GET      "/api1/lc_event"
[GIN] 2020/07/17 - 13:46:26 | 200 |      3.9903ms |             ::1 | GET      "/api1/group"
[GIN] 2020/07/17 - 13:46:26 | 200 |      4.9866ms |             ::1 | GET      "/api1/group"
[GIN] 2020/07/17 - 13:46:58 | 200 |         1m49s |             ::1 | GET      "/api1/lc_event"
[GIN] 2020/07/17 - 13:46:58 | 200 |         1m49s |             ::1 | GET      "/api1/lc_event"
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (6 handlers)
[GIN-debug] GET    /api1/group               --> router.Group (6 handlers)
[GIN-debug] GET    /api1/lc_state_summary    --> router.Lc_state_summary (6 handlers)
[GIN-debug] GET    /api1/lc_event            --> router.Lc_event (6 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN] 2020/07/17 - 13:51:17 | 200 |         2m12s |             ::1 | GET      "/api1/lc_event"
[GIN] 2020/07/17 - 13:51:17 | 200 |         2m12s |             ::1 | GET      "/api1/lc_event"
[GIN] 2020/07/17 - 13:51:37 | 200 |   32.0272557s |             ::1 | GET      "/api1/lc_event"
[GIN] 2020/07/17 - 13:51:37 | 200 |   32.0302859s |             ::1 | GET      "/api1/lc_event"
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (6 handlers)
[GIN-debug] GET    /api1/group               --> router.Group (6 handlers)
[GIN-debug] GET    /api1/lc_state_summary    --> router.Lc_state_summary (6 handlers)
[GIN-debug] GET    /api1/lc_event            --> router.Lc_event (6 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (6 handlers)
[GIN-debug] GET    /api1/group               --> router.Group (6 handlers)
[GIN-debug] GET    /api1/lc_state_summary    --> router.Lc_state_summary (6 handlers)
[GIN-debug] GET    /api1/lc_event            --> router.Lc_event (6 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /api1/login               --> router.Login (6 handlers)
[GIN-debug] GET    /api1/group               --> router.Group (6 handlers)
[GIN-debug] GET    /api1/lc_state_summary    --> router.Lc_state_summary (6 handlers)
[GIN-debug] GET    /api1/lc_event            --> router.Lc_event (6 handlers)
[GIN-debug] Listening and serving HTTP on :5000
[GIN] 2020/07/17 - 13:55:45 | 200 |         1m31s |             ::1 | GET      "/api1/lc_event"
[GIN] 2020/07/17 - 13:55:45 | 200 |         1m31s |             ::1 | GET      "/api1/lc_event"
[GIN] 2020/07/17 - 13:55:48 | 200 |   51.0445922s |    192.168.1.51 | GET      "/api1/lc_event"
[GIN] 2020/07/17 - 13:55:48 | 200 |   51.0476388s |    192.168.1.51 | GET      "/api1/lc_event"
[GIN] 2020/07/17 - 13:56:07 | 200 |     11.9709ms |    192.168.1.16 | GET      "/api1/group"
[GIN] 2020/07/17 - 13:56:07 | 200 |     12.9679ms |    192.168.1.16 | GET      "/api1/group"
[GIN] 2020/07/17 - 13:56:07 | 404 |            0s |    192.168.1.16 | GET      "/favicon.ico"
